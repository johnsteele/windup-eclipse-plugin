<?xml version="1.0" encoding="UTF-8" ?>
<xs:schema targetNamespace="http://windup.jboss.org/schema/jboss-ruleset" xmlns="http://windup.jboss.org/schema/jboss-ruleset" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified">

    <!-- Root element for Windup tests rules. -->
    <xs:element name="ruletest">
        <xs:annotation>
            <xs:documentation>Root element of Windup rules test.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="testDataPath" minOccurs="1" type="xs:string" />
                <xs:element name="sourceMode" minOccurs="0" maxOccurs="1" type="xs:boolean" />
                <xs:element name="rulePath" minOccurs="0" type="xs:string" />
                <xs:element name="source" minOccurs="0" maxOccurs="1" type="xs:string" />
                <xs:element name="target" minOccurs="0" maxOccurs="1" type="xs:string" />
                <xs:element ref="ruleset" minOccurs="0" maxOccurs="unbounded" />
            </xs:sequence>
            <xs:attribute type="xs:string" name="id"/>
        </xs:complexType>
    </xs:element>

    <!-- Root element. -->
    <xs:element name="ruleset">
        <xs:annotation>
            <xs:documentation>Root element of Windup ruleset.</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:element name="metadata" maxOccurs="unbounded" minOccurs="0">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="description" type="xs:string" minOccurs="0" maxOccurs="1" />
                            <xs:element name="dependencies">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="addon" minOccurs="1" maxOccurs="unbounded">
                                            <xs:complexType>
                                                <xs:attribute type="xs:string" name="id" use="optional" />
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                </xs:complexType>
                            </xs:element>
                            <xs:element name="sourceTechnology" type="technology" maxOccurs="unbounded" minOccurs="0" />
                            <xs:element name="targetTechnology" type="technology" maxOccurs="unbounded" minOccurs="0" />
                            <xs:element name="phase" maxOccurs="1" minOccurs="0">
                                <xs:simpleType>
                                    <xs:restriction base="xs:string">
                                        <xs:enumeration value="MigrationRulesPhase" />
                                        <xs:enumeration value="PostMigrationRulesPhase" />
                                        <xs:enumeration value="PreReportGenerationPhase" />
                                    </xs:restriction>
                                </xs:simpleType>
                            </xs:element>
                            <xs:element name="executeAfter" type="xs:string" maxOccurs="unbounded" minOccurs="0" />
                            <xs:element name="executeBefore" type="xs:string" maxOccurs="unbounded" minOccurs="0" />
                            <xs:element name="tag" type="xs:string" maxOccurs="unbounded" minOccurs="0" />
                            <xs:element name="overrideRules" type="xs:boolean" maxOccurs="1" minOccurs="0" />
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="rules" minOccurs="1">
                    <xs:complexType>
                        <xs:sequence>
                            <xs:element name="rule" minOccurs="0" maxOccurs="unbounded" type="rule" />
                            <xs:element name="file-mapping" type="mapping" minOccurs="0" maxOccurs="unbounded" />
                            <xs:element name="package-mapping" type="mapping" minOccurs="0" maxOccurs="unbounded" />
                            <xs:element name="javaclass-ignore" type="javaclass-ignore" minOccurs="0" maxOccurs="unbounded" />
                        </xs:sequence>
                    </xs:complexType>
                </xs:element>
                <xs:element name="package-mapping" type="mapping" minOccurs="0" maxOccurs="unbounded" />
                <xs:element name="file-mapping" type="mapping" minOccurs="0" maxOccurs="unbounded" />
                <xs:element name="javaclass-ignore" type="javaclass-ignore" minOccurs="0" maxOccurs="unbounded" />
            </xs:sequence>
            <xs:attribute type="xs:string" name="id" use="optional" />
        </xs:complexType>
    </xs:element>

    <xs:complexType name="rule">
        <xs:sequence>
            <xs:element name="when" type="when" />
            <xs:element name="perform" type="iteration"/>
            <xs:element name="otherwise" type="iteration" minOccurs="0" maxOccurs="1" />
            <xs:element name="where" type="where" minOccurs="0" maxOccurs="unbounded" />
            <!-- <xs:element name="task" type="task" maxOccurs="1"/> -->
        </xs:sequence>
        <xs:attribute type="xs:string" name="id" use="required" />
        <!-- <xs:attribute type="xs:boolean" name="isTask" use="optional" /> -->
    </xs:complexType>
    
    <!-- 
     <xs:complexType name="task">
        <xs:sequence>
            <xs:element type="xs:string" name="snippet" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element type="xs:string" name="comment" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute type="xs:boolean" name="completed"/>
    </xs:complexType>
    -->


    <!-- CONDITION DEFINITIONS -->


    <!-- JavaClass -->
    <xs:element name="javaclass">
        <xs:complexType mixed="true">
            <xs:sequence>
                <xs:choice maxOccurs="unbounded">
	                <xs:element type="xs:string" name="location" minOccurs="0" maxOccurs="unbounded">
	                    <xs:annotation>
		                    <xs:documentation>
		                        <![CDATA[
		                            <p>The location where the reference was found in a Java class.</p>
		                            <p>Location can refer to annotations, field and variable declarations, imports, and methods.</p>
		                        ]]>
		                    </xs:documentation>
	                    </xs:annotation>
	                </xs:element>
	                <xs:choice minOccurs="0" maxOccurs="unbounded">
	                    <xs:element ref="annotation-type"/>
	                    <xs:element ref="annotation-list"/>
	                    <xs:element ref="annotation-literal"/>
	                </xs:choice>
                </xs:choice>
            </xs:sequence>
            <xs:attribute type="xs:string" name="references">
                <xs:annotation>
                    <xs:documentation>
				        <![CDATA[
					        <p>The package or class name to match on. Wildcard characters can be used.</p>
					        <p>
					            <em>This attribute is required.</em> 
					        </p>
					        <p>
					            <strong>NOTE</strong>
					        </p>
					        <p>For performance reasons, you should not start the reference with wildcard characters.</p>
					        <p>For example, use
					            <code>weblogic.apache.xml.{*}</code> instead of 
					            <code>{web}.apache.xml.{*}</code>.
					        </p>
				        ]]>
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute type="xs:string" name="matchesSource" use="optional">
              <xs:annotation>
                    <xs:documentation>
				        <![CDATA[
					        <p>An exact regex to match. This is useful to distinguish hard-coded strings.</p>
				        ]]>
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute type="xs:string" name="as" use="optional">
              <xs:annotation>
                    <xs:documentation>
				        <![CDATA[
				            <p>A variable name assigned to the rule so that it can be used as a reference in later processing. See the from attribute.</p>
				        ]]>
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute type="xs:string" name="from" use="optional">
              <xs:annotation>
                    <xs:documentation>
				        <![CDATA[
				            <p>Begin the search query with the filtered result from a previous search identified by its as <i>VARIABLE_NAME</i>.</p>
				        ]]>
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute type="xs:string" name="in" use="optional">
                <xs:annotation>
                    <xs:documentation>
				        <![CDATA[
				            <p>Filter input files matching this regex (regular expression) naming pattern. Wildcard characters can be used.</p>
				        ]]>
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <!-- Annotation Conditions -->
    <xs:element name="annotation-type">
      <xs:annotation>
            <xs:documentation>
                <![CDATA[
                    <p>Match on a particular annotation type.</p>
                    <p>You can supply subconditions to be matched against the annotation elements.</p>
                    <p>The below example would match on a <code>Calendar</code> field declaration annotated with:
                    <p>
                        <code>@MyAnnotation(myvalue="test")</code>.
                    </p>
                    <p>
                        <code>
							<javaclass references="java.util.Calendar">
							    <location>FIELD_DECLARATION</location>
							    <annotation-type pattern="org.package.MyAnnotation">
							        <annotation-literal name="myvalue" pattern="test"/>
							    </annotation-type>
							</javaclass>
                        </code>
                    </p>
                ]]>
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:element ref="annotation-type"/>
                    <xs:element ref="annotation-list"/>
                    <xs:element ref="annotation-literal"/>
                </xs:choice>
            </xs:sequence>

            <xs:attribute type="xs:string" name="name" use="optional"/>
            <xs:attribute type="xs:string" name="pattern"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="annotation-list">
        <xs:annotation>
            <xs:documentation>
                <![CDATA[
                    <p>Match on an item in an array within an annotation.</p>
                    <p>If an array index is not specified, the condition will be matched if it applies to any item in the array.</p>
                    <p>You can supply subconditions to be matched against this element.<p>
                    <p>The below example would match on <code>@MyAnnotation(mylist={"one","two"})</code>.</p>
                    <p>
                        <code>
                            <javaclass references="org.package.MyAnnotation" >
                                <location>ANNOTATION</location>
                                <annotation-list name="mylist">
                                    <annotation-literal pattern="two"/>
                                </annotation-list>
                            </javaclass>
                     <p>Note that in this case, the <code><javaclass></code> refers to an annotation <code>@MyAnnotation</code>,<p>
                     <p>so the top-level annotation filter, <code><annotation-list></code> must specify the name attribute.</p>
                     <p>If the <code><javaclass></code> referred to a class that is annotated, then the top-level annotation filter<p>
                     <p>used would be <code><annotation-type></code>.</p>
                ]]>
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:sequence>
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                    <xs:element ref="annotation-type"/>
                    <xs:element ref="annotation-list"/>
                    <xs:element ref="annotation-literal"/>
                </xs:choice>
            </xs:sequence>

            <xs:attribute type="xs:string" name="name" use="optional"/>
            <xs:attribute type="xs:integer" name="index" use="optional"/>
        </xs:complexType>
    </xs:element>

    <xs:element name="annotation-literal">
        <xs:annotation>
            <xs:documentation>
                <![CDATA[
                    <p>Match on literal values inside of annotations.</p>
                    <p>The below example would match on <code>@MyAnnotation(myvalue="test")</code>.</p>
                    <p>
                        <code>
                            <javaclass references="org.package.MyAnnotation">
                                <location>ANNOTATION</location>
                                <annotation-literal name="myvalue" pattern="test"/>
                            </javaclass>
                        </code>
                     <p>Note that in this case, the <code><javaclass></code> refers to an annotation <code>@MyAnnotation</code>,</p>
                     <p>so the top-level annotation filter, <code><annotation-literal></code> must specify the name attribute.</p>
                     <p>If the <code><javaclass></code> referred to a class that is annotated, then the top-level annotation filter</p>
                     <p>used would be <code><annotation-type></code>.</p>
                ]]>
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:attribute type="xs:string" name="name" use="optional"/>
            <xs:attribute type="xs:string" name="pattern"/>
        </xs:complexType>
    </xs:element>

    <!-- XmlFile -->
    <xs:element name="xmlfile">
        <xs:complexType>
            <xs:sequence>
                <xs:element ref="namespace" minOccurs="0" maxOccurs="unbounded" />
            </xs:sequence>
            <xs:attribute type="xs:string" name="as" use="optional">
                <xs:annotation>
	                <xs:documentation>
	                    <![CDATA[
                            <p>A variable name assigned to the rule so that it can be used as a reference in later processing.</p>
                            <p>See the from attribute.</p>
	                    ]]>
	                </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute type="xs:string" name="xpathResultMatch" use="optional">
                <xs:annotation>
	                <xs:documentation>
	                    <![CDATA[
	                        <p>Return results that match the given regex.</p>
	                    ]]>
	                 </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute type="xs:string" name="matches" use="optional">
                <xs:annotation>
		            <xs:documentation>
		                <![CDATA[
                            <p>An XPATH - Match on an XML file condition.</p>
		                ]]>
		            </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute type="xs:string" name="public-id" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        <![CDATA[
                             <p>The DTD public-id regex.</p>
                        ]]>
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute type="xs:string" name="system-id" use="optional" />
            <xs:attribute type="xs:string" name="in" use="optional">
	            <xs:annotation>
	                <xs:documentation>
	                    <![CDATA[
                            <p>Used to filter input files matching this regular expression naming pattern.</p>
	                        <p>Wildcard characters can be used.</p>
	                    ]]>
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute type="xs:string" name="from" use="optional">
                <xs:annotation>
                    <xs:documentation>
	                    <![CDATA[
					         <p>Begin the search query with the filtered result from a previous search identified by its as VARIABLE_NAME.</p>
					    ]]>
				    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:element name="namespace">
        <xs:annotation>
            <xs:documentation>
                <![CDATA[
                    <p>The namespace referenced in XML files. This element contains two optional attributes: The prefix and the uri.</p>
                ]]>
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:simpleContent>
                <xs:extension base="xs:string">
                    <xs:attribute type="xs:string" name="prefix" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                <![CDATA[
                                    <p>The prefix of the namespace referenced in XML files.</p>
                                ]]>
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                    <xs:attribute type="xs:anyURI" name="uri" use="optional">
                        <xs:annotation>
                            <xs:documentation>
                                <![CDATA[
                                    <p>The uri of the namespace referenced in XML files.</p>
                                ]]>
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:simpleContent>
        </xs:complexType>
    </xs:element>

    <!-- Project -->
    <xs:element name="project">
        <xs:complexType>
            <xs:sequence>
                <xs:element name="artifact">
                    <xs:complexType>
                        <xs:simpleContent>
                            <xs:extension base="xs:string">
                                <xs:attribute type="xs:string" name="groupId" />
                                <xs:attribute type="xs:string" name="artifactId" />
                                <xs:attribute type="xs:string" name="fromVersion" />
                                <xs:attribute type="xs:string" name="toVersion" />
                            </xs:extension>
                        </xs:simpleContent>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
        </xs:complexType>
    </xs:element>

    <xs:element name="filecontent">
        <xs:complexType>
            <xs:attribute type="xs:string" name="from" />
            <xs:attribute type="xs:string" name="pattern" use="required"/>
            <xs:attribute type="xs:string" name="filename" />
            <xs:attribute type="xs:string" name="as" />
        </xs:complexType>
    </xs:element>

    <xs:element name="file">
        <xs:complexType>
            <xs:attribute type="xs:string" name="from" />
            <xs:attribute type="xs:string" name="filename" use="required"/>
            <xs:attribute type="xs:string" name="as" />
        </xs:complexType>
    </xs:element>

    <xs:element name="has-classification">
        <xs:complexType>
            <xs:attribute type="xs:string" name="title" use="optional" />
        </xs:complexType>
    </xs:element>
    <xs:element name="has-hint">
        <xs:complexType>
            <xs:attribute type="xs:string" name="message" use="optional" />
        </xs:complexType>
    </xs:element>

    <xs:complexType name="iterable-filter">
         <xs:complexContent>
            <xs:extension base="when-base">
                <xs:attribute name="size" type="xs:integer"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!-- TEST CONDITION DEFINITIONS -->

   <xs:element name="classification-exists">
      <xs:complexType>
         <xs:attribute type="xs:string" name="classification" use="required"/>
         <xs:attribute type="xs:string" name="in"/>
      </xs:complexType>
   </xs:element>

   <xs:element name="file-exists">
      <xs:complexType>
         <xs:attribute type="xs:string" name="filename" use="required" />
      </xs:complexType>
   </xs:element>

   <xs:element name="hint-exists">
      <xs:complexType>
         <xs:attribute type="xs:string" name="message" use="required"/>
         <xs:attribute type="xs:string" name="in"/>
      </xs:complexType>
   </xs:element>

   <xs:element name="lineitem-exists">
      <xs:complexType>
         <xs:attribute type="xs:string" name="message" use="required"/>
         <xs:attribute type="xs:string" name="in"/>
      </xs:complexType>
   </xs:element>

   <!-- OPERATION DEFINITIONS -->

   <xs:element name="fail">
      <xs:complexType>
         <xs:attribute type="xs:string" name="message" />
      </xs:complexType>
   </xs:element>

    <!-- OPERATION DEFINITIONS -->

    <!-- Hint -->
    <xs:element name="hint">
        <xs:complexType mixed="true">
            <xs:sequence>
                <xs:choice maxOccurs="unbounded">
	                <xs:element name="message" minOccurs="0" maxOccurs="1" type="xs:string">
		                <xs:annotation>
		                    <xs:documentation>
		                        <![CDATA[
		                            <p>A message describing the migration hint.</p>
		                        ]]>                
		                    </xs:documentation>
		                </xs:annotation>
	                </xs:element>
	                <xs:element ref="link" minOccurs="0" maxOccurs="unbounded">
	                    <xs:annotation>
	                        <xs:documentation>
	                            <![CDATA[
	                                <p>Identify or classify links to informational content.</p>
	                                <p></p>
	                            ]]>                
	                        </xs:documentation>
	                    </xs:annotation>
	                </xs:element>
	                <xs:element name="tag" minOccurs="0" maxOccurs="unbounded" type="xs:string">
	                    <xs:annotation>
	                        <xs:documentation>
	                            <![CDATA[
	                                <p>Define a custom tag for this hint.</p>
	                            ]]>                
	                        </xs:documentation>
	                    </xs:annotation>
	                </xs:element>
	                <xs:element ref="quickfix" minOccurs="0" maxOccurs="unbounded">
	                    <xs:annotation>
	                        <xs:documentation>
	                            <![CDATA[
	                                <p>Contains information to be used by the Eclipse plugin to perform quick fixes when the rule condition is met.</p>
	                            ]]>                
	                        </xs:documentation>
	                    </xs:annotation>
	                </xs:element>
                </xs:choice>
            </xs:sequence>
            <xs:attribute name="title" type="xs:string" use="required">
	            <xs:annotation>
	                <xs:documentation>
	                    <![CDATA[
		                    <p>The title of this hint.</p>
		                    <p>
		                        <em>This attribute is required.</em>
		                    </p>
                        ]]>                
	                </xs:documentation>
	            </xs:annotation>
            </xs:attribute>
            <!-- <xs:attribute name="severity" type="severity-type" use="optional" /> -->
            <xs:attribute name="category-id" type="category-type" use="optional">
	            <xs:annotation>
	                 <xs:documentation>
	                 <![CDATA[
	                    <p>A reference to a category as defined in <code>MTR_HOME/rules/migration-core/core.windup.categories.xml</code>.</p>
	                    <p>The default categories are:</p>
	                    <ul>
						    <li>mandatory</li>
                            <li>optional</li>
                            <li>potential</li>
                            <li>information</li>
                            <li>cloud-mandatory</li>
                            <li>cloud-optional</li>
						</ul>
	                 ]]>
	                 </xs:documentation>
	            </xs:annotation>            
            </xs:attribute>
            <xs:attribute name="in" type="xs:string" use="optional">
            <xs:annotation>
                    <xs:documentation>
                        <![CDATA[
                            <p>Create a new <code>Hint</code> in the <code>FileLocationModel</code> resolved by the given variable.</p>
                        ]]>
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="effort" type="xs:byte" use="optional" >
	            <xs:annotation>
	                <xs:documentation>
				        <![CDATA[
					        <p>Story points are used to express the level of effort needed to migrate particular application constructs,</p>
					        <p>and the application as a whole. It does not necessarily translate to man-hours, but the value should be consistent across tasks.</p>
				        ]]>
	                </xs:documentation>
	            </xs:annotation>
            </xs:attribute>
            <!-- <xs:attribute type="xs:string" name="message" use="optional"/> -->
        </xs:complexType>
    </xs:element>
    
    <xs:simpleType name="severity-type">
        <xs:restriction base="xs:string">
            <xs:enumeration value="mandatory"/>
            <xs:enumeration value="optional"/>
            <xs:enumeration value="potential"/>
            <xs:enumeration value="information"/>
            <xs:enumeration value="cloud-mandatory"/>
            <xs:enumeration value="cloud-optional"/>
        </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="string-pattern-type">
	    <xs:restriction base="xs:string">
	        <xs:pattern value="\S.*"/>
	    </xs:restriction>
    </xs:simpleType>
    
    <xs:simpleType name="category-type">
        <xs:union memberTypes="severity-type string-pattern-type"/>
    </xs:simpleType>
    
    <xs:simpleType name="quickfix-type">
        <xs:annotation>
            <xs:documentation><![CDATA[
            This describes type of quick fix in type attribute.
            There are currently 3 types supported 
            for replacement -> REPLACE, addition -> INSERT_LINE and deleting -> DELETE_LINE.]]>
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="REPLACE"/>
            <xs:enumeration value="DELETE_LINE"/>
            <xs:enumeration value="INSERT_LINE"/>
        </xs:restriction>
    </xs:simpleType>

    <!-- Classification -->
    <xs:element name="classification">
        <xs:complexType mixed="true">
            <xs:choice maxOccurs="unbounded">
	            <xs:sequence>
	                <xs:element name="description" minOccurs="0" maxOccurs="unbounded" type="xs:string" />
	                <xs:element ref="link" minOccurs="0" maxOccurs="unbounded" />
	                <xs:element name="tag" minOccurs="0" maxOccurs="unbounded" type="xs:string" />
	                <xs:element ref="quickfix" minOccurs="0" maxOccurs="unbounded"/>
	            </xs:sequence>
            </xs:choice>
            <xs:attribute name="title" type="xs:string" use="required">
                <xs:annotation>
                    <xs:documentation>
                        <![CDATA[
                            <p>The title given to this resource.</p>
                        ]]>
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <xs:attribute name="effort" type="xs:byte" use="optional">
                <xs:annotation>
                    <xs:documentation>
                        <![CDATA[
                            <p>Story points are used to express the level of effort needed to migrate particular application constructs,</p>
                            <p>and the application as a whole. It does not necessarily translate to man-hours, but the value should be consistent across tasks.</p>
                        ]]>
                    </xs:documentation>
                </xs:annotation>
            </xs:attribute>
            <!-- <xs:attribute name="severity" type="severity-type" use="optional" /> -->
            <xs:attribute name="category-id" type="category-type" use="optional">
                <xs:annotation>
                     <xs:documentation>
                     <![CDATA[
                        <p>A reference to a category as defined in <code>MTR_HOME/rules/migration-core/core.windup.categories.xml</code>.</p>
                        <p>The default categories are:</p>
                        <ul>
                            <li>mandatory</li>
                            <li>optional</li>
                            <li>potential</li>
                            <li>information</li>
                            <li>cloud-mandatory</li>
                            <li>cloud-optional</li>
                        </ul>
                     ]]>
                     </xs:documentation>
                </xs:annotation>            
            </xs:attribute>
            <xs:attribute name="of" type="xs:string" use="optional">
                <xs:annotation>
                     <xs:documentation>
                     <![CDATA[
                        <p>Create a new classification for the given reference.</p>
                     ]]>
                     </xs:documentation>
                </xs:annotation>  
            </xs:attribute>
        </xs:complexType>
    </xs:element>

    <xs:element name="link">
        <xs:complexType>
            <xs:simpleContent>
                <xs:extension base="xs:string">
                    <xs:attribute type="xs:anyURI" name="href" use="required"/>
                    <xs:attribute type="xs:string" name="title" use="required"/>
                </xs:extension>
            </xs:simpleContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="quickfix">
        <xs:annotation>
            <xs:documentation>
                Quick fix is supported element targeting tools to replace, delete or insert lines/strings.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType mixed="true">
            <xs:sequence>
                <xs:element name="newline" type="xs:string" maxOccurs="1" minOccurs="0" />
                <xs:element name="replacement" type="xs:string" maxOccurs="1" minOccurs="0" />
                <xs:element name="search" type="xs:string" maxOccurs="1" minOccurs="0" />
            </xs:sequence>
            <xs:attribute type="quickfix-type" name="type" use="required" />
            <xs:attribute type="xs:string" name="name" use="required" />
        </xs:complexType>
    </xs:element>    

    <xs:element name="log">
        <xs:complexType>
            <xs:attribute type="xs:string" name="message" />
        </xs:complexType>
    </xs:element>

    <!-- Line Hint -->
    <xs:element name="lineitem">
        <xs:complexType>
            <xs:simpleContent>
                <xs:extension base="xs:string">
                    <xs:attribute type="xs:string" name="message" use="required"/>
                </xs:extension>
            </xs:simpleContent>
        </xs:complexType>
    </xs:element>

    <!-- XSLT Transformation -->
    <xs:element name="xslt">
        <xs:complexType mixed="true">
            <xs:sequence>
                <xs:element name="xslt-parameter" minOccurs="0" maxOccurs="unbounded">
                    <xs:complexType>
                        <xs:simpleContent>
                            <xs:extension base="xs:string">
                                <xs:attribute type="xs:string" name="property" />
                                <xs:attribute type="xs:string" name="value" />
                            </xs:extension>
                        </xs:simpleContent>
                    </xs:complexType>
                </xs:element>
            </xs:sequence>
            <xs:attribute type="xs:string" name="of" use="optional" />
            <xs:attribute type="xs:string" name="title" use="required"/>
            <xs:attribute type="xs:string" name="extension" use="required"/>
            <xs:attribute type="xs:string" name="template" use="required"/>
            <xs:attribute type="xs:byte" name="effort" use="optional" />
        </xs:complexType>
    </xs:element>

    <!-- MAIN BUILDING BLOCKS -->
    <xs:complexType name="where">
        <xs:sequence>
            <xs:element name="matches" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                    <xs:simpleContent>
                        <xs:extension base="xs:string">
                            <xs:attribute type="xs:string" name="pattern" />
                        </xs:extension>
                    </xs:simpleContent>
                </xs:complexType>
            </xs:element>
        </xs:sequence>
        <xs:attribute type="xs:string" name="param" use="optional" />
    </xs:complexType>

    <xs:complexType name="when-base">
        <!-- Conditions -->
        <xs:choice maxOccurs="unbounded">
            <xs:element name="true" minOccurs="0" maxOccurs="1" />
            <xs:element name="false" minOccurs="0" maxOccurs="1" />
            <xs:element ref="javaclass" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="xmlfile" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="project" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="filecontent" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="file" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="classification-exists" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="file-exists" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="hint-exists" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="lineitem-exists" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="iterable-filter" type="iterable-filter" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="to-file-model" type="when-base" minOccurs="0" maxOccurs="unbounded" />
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="when">
        <xs:complexContent>
            <xs:extension base="when-base">
                <xs:choice maxOccurs="unbounded">
                    <xs:element name="or" type="when" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="and" type="when" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="not" type="when" minOccurs="0" maxOccurs="unbounded" />
                </xs:choice>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="iteration-when">
        <xs:complexContent>
            <xs:extension base="when-base">
                <xs:choice maxOccurs="unbounded">
                    <xs:element ref="has-classification" />
                    <xs:element ref="has-hint" />
                    <xs:element name="or" type="iteration-when" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="and" type="iteration-when" minOccurs="0" maxOccurs="unbounded" />
                    <xs:element name="not" type="iteration-when" minOccurs="0" maxOccurs="unbounded" />
                </xs:choice>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="iteration">
        <xs:choice maxOccurs="unbounded">
            <xs:element name="when" type="iteration-when" minOccurs="0" maxOccurs="1" />
            <xs:element name="perform" type="iteration" />
            <xs:element name="otherwise" type="iteration" minOccurs="0" maxOccurs="1" />
            <xs:element name="iteration" type="iteration" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="classification" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="hint" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="log" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="xslt" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="lineitem" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="fail" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="classification-exists" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="file-exists" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="hint-exists" minOccurs="0" maxOccurs="unbounded" />
            <xs:element ref="lineitem-exists" minOccurs="0" maxOccurs="unbounded" />
        </xs:choice>
        <xs:attribute type="xs:string" name="over" />
        <!-- <xs:attribute type="xs:string" name="as" /> not supported in handler yet -->
    </xs:complexType>


    <xs:complexType name="technology">
        <xs:attribute type="xs:string" name="versionRange" />
        <xs:attribute type="xs:string" name="id" use="required"/>
    </xs:complexType>

    <xs:complexType name="mapping">
        <xs:attribute type="xs:string" name="from" use="required" />
        <xs:attribute type="xs:string" name="to" use="required" />
        <xs:attribute type="xs:string" name="id" use="required"/>
        <xs:attribute type="onParseError-type" name="onParseError" />
    </xs:complexType>

    <xs:simpleType name="onParseError-type">
        <xs:restriction base="xs:string">
            <xs:enumeration value="ignore"/>
            <xs:enumeration value="warn"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="javaclass-ignore">
        <xs:attribute type="xs:string" name="reference-prefix" use="required" />
    </xs:complexType>

</xs:schema>
